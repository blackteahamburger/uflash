from collections.abc import Callable as Callable
from typing import Any, Final

MICROPYTHON_V1_VERSION: Final[str]
MICROPYTHON_V2_VERSION: Final[str]
MICROBIT_ID_V1: Final[str]
MICROBIT_ID_V2: Final[str]
MAX_SIZE: Final[int]

def minify(script: bytes) -> bytes: ...
def script_to_fs(script: bytes, microbit_version_id: str) -> str: ...
def pad_hex_string(hex_records_str: str, alignment: int = 512) -> str: ...
def embed_fs_uhex(universal_hex_str: str, python_code: bytes | None = None) -> str: ...
def bytes_to_ihex(addr: int, data: bytes, universal_data_record: bool = False) -> str: ...
def unhexlify(blob: str) -> str: ...
def extract_script(embedded_hex: str) -> str: ...
def find_microbit() -> str | None: ...
def save_hex(hex_file: str, path: str) -> None: ...
def flash(path_to_python: str | None = None, paths_to_microbits: list[str] | None = None, path_to_runtime: str | None = None, python_script: bytes | None = None, keepname: bool = False) -> None: ...
def extract(path_to_hex: str, output_path: str | None = None) -> None: ...
def watch_file(path: str, func: Callable[..., Any], *args: Any, **kwargs: Any) -> None: ...
def py2hex(argv: list[str] | None = None) -> None: ...
def main(argv: list[str] | None = None) -> None: ...
